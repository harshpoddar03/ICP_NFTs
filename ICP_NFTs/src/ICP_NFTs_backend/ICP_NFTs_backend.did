type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type NFT = record {
  model : text;
  owner : principal;
  pdfcontent : vec vec record { text; text };
  embeddings : vec vec float32;
};
type ProcessPdfInput = record {
  pdf_contents : vec blob;
  name : text;
  selected_model : text;
  owner_principal : principal;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type TransformArgs = record { context : blob; response : HttpResponse };
service : {
  add_authorized_minter : (principal) -> (Result);
  all_user_nfts : (principal) -> (vec nat64) query;
  burn_nft : (nat64) -> (bool);
  get_token_content : (nat64) -> (opt NFT) query;
  mint_nft : (principal, text, vec vec float32, vec text) -> (nat64);
  process_pdfs_and_mint_nft : (ProcessPdfInput) -> (Result_1);
  transfer_nft : (principal, nat64) -> (bool);
  transform : (TransformArgs) -> (HttpResponse) query;
}